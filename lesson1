##python learning
print()
a=0
abs(a)

str1.find('some')
str1.rfind('some')
str1.startwith("")
str1.endwith("")
town = input ("enter your name")

list=[]
list.apppend()
list.remove()
list[:]
list1.sort()
                                                            
set={}
set1.union(set2)
set1.intersection(set2)
set1.difference(set2)
s1 & s2 #取交集

dictionary = {"a":"b", ...}
dict(list)

inflie = open("data.txt, 'r'")
listVar = [line.rstrip() for line in infile]
strvar = infile.read()
strvar = infile.readline()
infile.close()

outfile = open(filename, 'w')
outfile.writelines(list1)
outfile.write(strVar)
outfile = open(filename,'a')

import os
os.remove(fileName)
os.rename(oldName, newName)
os.oath.isfile(fileName)

csv
line.split(',')

sort(name key reverse)

chr(65)
ord('A')

and or not

if condition:
    command1
elif:
    command2
else:
    command3

while condition
    command4

break
continue

for var in sequence
    command5
    pass//do nothing

range(startnumber,finishnumber,steplength)

def FunctionName(para1,para2, ...)
    commands
    return expression

    //if you make a var out of the function, you can only change it by global globalVariableName
    //it will make you can change the var in the function.

import moduleName
moduleName.function()

from moduleName import*
function()

#列表解析
[x for x in l if x >=0 ] #找出l中的非负数，这种方法叫列表解析
{k:v for k,v in d.items() if v >= 0} #字典解析

#将字典转为元组列表
[(k,v) for k,v in d.items()] #第一个方法，列表解析
list(zip(d.keys(),d.values()))# zip函数

#堆
输出前n大的元素 heapq.nlargest(n,List)
输出第n大的元素 heapq.nlargest(n,List)[-1]
输出第n小的元素 heapq.nsmallest(n,List)[-1]

#递归
def fib(n):    
"""假定n是正整数返回第n个斐波那契数"""     
    if n == 0 or n == 1:         
        return 1     
    else:         
        return fib(n-1) + fib(n-2)

map
python map(fun，[arg]+)函数最少有两个参数，第一参数为一个函数名，第二个参数是对应的这个函数的参数（一般为一个或多个list）。
>>>def fun(x):
...     return x+1
...
>>>list(map(fun,[1,2,3]))
>>>[2,3,4]
多参数例子：
>>>def fun(x,y,z):
...     return x*y*z
...
>>>list(map(fun,[1,2,3],[1,2,3],[1,2,3]))
>>>[1,8,27]
(python 3.x 中map函数返回的是iterators，无法像python2.x 直接返回一个list，故需要再加上一个list()将iterators转化为一个list)。


#实现迭代的一个函数
from functools import reduce
reduce(lambda a,b: a+b,list(input),origin_a)
#作用：以origin_a为初始值（可以省略），将list(input)中的数据，以函数(此处为匿名函数lambda)进行迭代。
#函数语法：  reduce(function, iterable[,initializer])
#函数参数含义如下：
#1、function 需要带两个参数，1个是用于保存操作的结果，另一个是每次迭代的元素。
#2、iterable 待迭代处理的集合
#3、initializer 初始值，可以没有。
#reduce函数的运作过程是，当调用reduce方法时：
#1、如果存在initializer参数，会先从iterable中取出第一个元素值，然后initializer和元素值会传给function处理；
#接着再从iterable中取出第二个元素值，与function函数的返回值 再一起传给function处理，以此迭代处理完所有元素。
#最后一次处理的function返回值就是reduce函数的返回值。
#2、如果不存在initializer参数，会先从iterable中取出第一个元素值作为initializer值，
#然后以此从iterable取第二个元素及以后的元素进行处理。
#特殊情况下，如果集合只有一个元素，则无论function如何处理，reduce返回的都是第一个元素的值。

#sum 特殊用法
A=[[1,2],[3,4],]
   



